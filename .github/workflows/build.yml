name: Build and Package

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Manual trigger

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: "3.20" # Specify your CMake version

      - name: Install dependencies
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update && sudo apt-get install -y g++ make nlohmann-json3-dev
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install gcc nlohmann-json
          fi

      - name: Configure CMake
        run: cmake -S . -B build

      - name: Build
        run: cmake --build build --config Release

      - name: List Build Files
        run: ls -R ./build

      - name: Create Installer
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get install -y ruby-dev build-essential && sudo gem install fpm -f
            zip ./CMakeBoilerplateGenerator.zip ./build/CMakeBoilerplateGenerator
            fpm -s zip -t deb --prefix /usr/bin -n CMakeBoilerplateGenerator -v 1.0.0 ./CMakeBoilerplateGenerator.zip
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            hdiutil create -volname CMakeBoilerplateGenerator -srcfolder ./build -ov -format UDZO CMakeBoilerplateGenerator.dmg
          fi

      - name: Upload Artifacts
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Conditional check
        uses: actions/upload-artifact@v4
        with:
          name: installer-${{ matrix.os }}
          path: |
            ${{ matrix.os == 'ubuntu-latest' && 'cmakeboilerplategenerator_1.0.0_amd64.deb' }}
            ${{ matrix.os == 'macos-latest' && 'CMakeBoilerplateGenerator.dmg' }}

      - name: Cleanup
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get clean
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # Clean up any temporary files if needed
            rm -rf ./build
          fi
